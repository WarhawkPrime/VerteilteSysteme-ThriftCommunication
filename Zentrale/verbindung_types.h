/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef verbindung_TYPES_H
#define verbindung_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace Thrift {

class Message;

class ClientUnavailable;

typedef struct _Message__isset {
  _Message__isset() : newestTempData(false), newestWindData(false), newestHumidityData(false), newestBrightnessData(false) {}
  bool newestTempData :1;
  bool newestWindData :1;
  bool newestHumidityData :1;
  bool newestBrightnessData :1;
} _Message__isset;

class Message : public virtual ::apache::thrift::TBase {
 public:

  Message(const Message&);
  Message& operator=(const Message&);
  Message() : newestTempData(), newestWindData(), newestHumidityData(), newestBrightnessData() {
  }

  virtual ~Message() noexcept;
  std::string newestTempData;
  std::string newestWindData;
  std::string newestHumidityData;
  std::string newestBrightnessData;

  _Message__isset __isset;

  void __set_newestTempData(const std::string& val);

  void __set_newestWindData(const std::string& val);

  void __set_newestHumidityData(const std::string& val);

  void __set_newestBrightnessData(const std::string& val);

  bool operator == (const Message & rhs) const
  {
    if (!(newestTempData == rhs.newestTempData))
      return false;
    if (!(newestWindData == rhs.newestWindData))
      return false;
    if (!(newestHumidityData == rhs.newestHumidityData))
      return false;
    if (!(newestBrightnessData == rhs.newestBrightnessData))
      return false;
    return true;
  }
  bool operator != (const Message &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Message & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Message &a, Message &b);

std::ostream& operator<<(std::ostream& out, const Message& obj);

typedef struct _ClientUnavailable__isset {
  _ClientUnavailable__isset() : message(false) {}
  bool message :1;
} _ClientUnavailable__isset;

class ClientUnavailable : public ::apache::thrift::TException {
 public:

  ClientUnavailable(const ClientUnavailable&);
  ClientUnavailable& operator=(const ClientUnavailable&);
  ClientUnavailable() : message() {
  }

  virtual ~ClientUnavailable() noexcept;
  std::string message;

  _ClientUnavailable__isset __isset;

  void __set_message(const std::string& val);

  bool operator == (const ClientUnavailable & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const ClientUnavailable &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientUnavailable & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const noexcept;
};

void swap(ClientUnavailable &a, ClientUnavailable &b);

std::ostream& operator<<(std::ostream& out, const ClientUnavailable& obj);

} // namespace

#endif
