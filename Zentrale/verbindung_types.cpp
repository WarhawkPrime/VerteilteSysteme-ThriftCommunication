/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "verbindung_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Thrift {


Message::~Message() noexcept {
}


void Message::__set_newestTempData(const std::string& val) {
  this->newestTempData = val;
}

void Message::__set_newestWindData(const std::string& val) {
  this->newestWindData = val;
}

void Message::__set_newestHumidityData(const std::string& val) {
  this->newestHumidityData = val;
}

void Message::__set_newestBrightnessData(const std::string& val) {
  this->newestBrightnessData = val;
}
std::ostream& operator<<(std::ostream& out, const Message& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Message::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->newestTempData);
          this->__isset.newestTempData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->newestWindData);
          this->__isset.newestWindData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->newestHumidityData);
          this->__isset.newestHumidityData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->newestBrightnessData);
          this->__isset.newestBrightnessData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Message::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Message");

  xfer += oprot->writeFieldBegin("newestTempData", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->newestTempData);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("newestWindData", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->newestWindData);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("newestHumidityData", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->newestHumidityData);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("newestBrightnessData", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->newestBrightnessData);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Message &a, Message &b) {
  using ::std::swap;
  swap(a.newestTempData, b.newestTempData);
  swap(a.newestWindData, b.newestWindData);
  swap(a.newestHumidityData, b.newestHumidityData);
  swap(a.newestBrightnessData, b.newestBrightnessData);
  swap(a.__isset, b.__isset);
}

Message::Message(const Message& other0) {
  newestTempData = other0.newestTempData;
  newestWindData = other0.newestWindData;
  newestHumidityData = other0.newestHumidityData;
  newestBrightnessData = other0.newestBrightnessData;
  __isset = other0.__isset;
}
Message& Message::operator=(const Message& other1) {
  newestTempData = other1.newestTempData;
  newestWindData = other1.newestWindData;
  newestHumidityData = other1.newestHumidityData;
  newestBrightnessData = other1.newestBrightnessData;
  __isset = other1.__isset;
  return *this;
}
void Message::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Message(";
  out << "newestTempData=" << to_string(newestTempData);
  out << ", " << "newestWindData=" << to_string(newestWindData);
  out << ", " << "newestHumidityData=" << to_string(newestHumidityData);
  out << ", " << "newestBrightnessData=" << to_string(newestBrightnessData);
  out << ")";
}


ClientUnavailable::~ClientUnavailable() noexcept {
}


void ClientUnavailable::__set_message(const std::string& val) {
  this->message = val;
}
std::ostream& operator<<(std::ostream& out, const ClientUnavailable& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ClientUnavailable::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ClientUnavailable::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ClientUnavailable");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ClientUnavailable &a, ClientUnavailable &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

ClientUnavailable::ClientUnavailable(const ClientUnavailable& other2) : TException() {
  message = other2.message;
  __isset = other2.__isset;
}
ClientUnavailable& ClientUnavailable::operator=(const ClientUnavailable& other3) {
  message = other3.message;
  __isset = other3.__isset;
  return *this;
}
void ClientUnavailable::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ClientUnavailable(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* ClientUnavailable::what() const noexcept {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: ClientUnavailable";
  }
}

} // namespace
