/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "SendSensordataService.h"

namespace Thrift {


    SendSensordataService_getData_args::~SendSensordataService_getData_args() noexcept {
    }


    uint32_t SendSensordataService_getData_args::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            xfer += iprot->skip(ftype);
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t SendSensordataService_getData_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("SendSensordataService_getData_args");

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }


    SendSensordataService_getData_pargs::~SendSensordataService_getData_pargs() noexcept {
    }


    uint32_t SendSensordataService_getData_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("SendSensordataService_getData_pargs");

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }


    SendSensordataService_getData_result::~SendSensordataService_getData_result() noexcept {
    }


    uint32_t SendSensordataService_getData_result::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
            case 0:
                if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                    xfer += this->success.read(iprot);
                    this->__isset.success = true;
                }
                else {
                    xfer += iprot->skip(ftype);
                }
                break;
            case 1:
                if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                    xfer += this->unavailable.read(iprot);
                    this->__isset.unavailable = true;
                }
                else {
                    xfer += iprot->skip(ftype);
                }
                break;
            default:
                xfer += iprot->skip(ftype);
                break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t SendSensordataService_getData_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

        uint32_t xfer = 0;

        xfer += oprot->writeStructBegin("SendSensordataService_getData_result");

        if (this->__isset.success) {
            xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
            xfer += this->success.write(oprot);
            xfer += oprot->writeFieldEnd();
        }
        else if (this->__isset.unavailable) {
            xfer += oprot->writeFieldBegin("unavailable", ::apache::thrift::protocol::T_STRUCT, 1);
            xfer += this->unavailable.write(oprot);
            xfer += oprot->writeFieldEnd();
        }
        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }


    SendSensordataService_getData_presult::~SendSensordataService_getData_presult() noexcept {
    }


    uint32_t SendSensordataService_getData_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
            case 0:
                if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                    xfer += (*(this->success)).read(iprot);
                    this->__isset.success = true;
                }
                else {
                    xfer += iprot->skip(ftype);
                }
                break;
            case 1:
                if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                    xfer += this->unavailable.read(iprot);
                    this->__isset.unavailable = true;
                }
                else {
                    xfer += iprot->skip(ftype);
                }
                break;
            default:
                xfer += iprot->skip(ftype);
                break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    void SendSensordataServiceClient::getData(SensorDataMessage& _return)
    {
        send_getData();
        recv_getData(_return);
    }

    void SendSensordataServiceClient::send_getData()
    {
        int32_t cseqid = 0;
        oprot_->writeMessageBegin("getData", ::apache::thrift::protocol::T_CALL, cseqid);

        SendSensordataService_getData_pargs args;
        args.write(oprot_);

        oprot_->writeMessageEnd();
        oprot_->getTransport()->writeEnd();
        oprot_->getTransport()->flush();
    }

    void SendSensordataServiceClient::recv_getData(SensorDataMessage& _return)
    {

        int32_t rseqid = 0;
        std::string fname;
        ::apache::thrift::protocol::TMessageType mtype;

        iprot_->readMessageBegin(fname, mtype, rseqid);
        if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
            ::apache::thrift::TApplicationException x;
            x.read(iprot_);
            iprot_->readMessageEnd();
            iprot_->getTransport()->readEnd();
            throw x;
        }
        if (mtype != ::apache::thrift::protocol::T_REPLY) {
            iprot_->skip(::apache::thrift::protocol::T_STRUCT);
            iprot_->readMessageEnd();
            iprot_->getTransport()->readEnd();
        }
        if (fname.compare("getData") != 0) {
            iprot_->skip(::apache::thrift::protocol::T_STRUCT);
            iprot_->readMessageEnd();
            iprot_->getTransport()->readEnd();
        }
        SendSensordataService_getData_presult result;
        result.success = &_return;
        result.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        if (result.__isset.success) {
            // _return pointer has now been filled
            return;
        }
        if (result.__isset.unavailable) {
            throw result.unavailable;
        }
        throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getData failed: unknown result");
    }

    bool SendSensordataServiceProcessor::dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) {
        ProcessMap::iterator pfn;
        pfn = processMap_.find(fname);
        if (pfn == processMap_.end()) {
            iprot->skip(::apache::thrift::protocol::T_STRUCT);
            iprot->readMessageEnd();
            iprot->getTransport()->readEnd();
            ::apache::thrift::TApplicationException x(::apache::thrift::TApplicationException::UNKNOWN_METHOD, "Invalid method name: '" + fname + "'");
            oprot->writeMessageBegin(fname, ::apache::thrift::protocol::T_EXCEPTION, seqid);
            x.write(oprot);
            oprot->writeMessageEnd();
            oprot->getTransport()->writeEnd();
            oprot->getTransport()->flush();
            return true;
        }
        (this->*(pfn->second))(seqid, iprot, oprot, callContext);
        return true;
    }

    void SendSensordataServiceProcessor::process_getData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
    {
        void* ctx = NULL;
        if (this->eventHandler_.get() != NULL) {
            ctx = this->eventHandler_->getContext("SendSensordataService.getData", callContext);
        }
        ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "SendSensordataService.getData");

        if (this->eventHandler_.get() != NULL) {
            this->eventHandler_->preRead(ctx, "SendSensordataService.getData");
        }

        SendSensordataService_getData_args args;
        args.read(iprot);
        iprot->readMessageEnd();
        uint32_t bytes = iprot->getTransport()->readEnd();

        if (this->eventHandler_.get() != NULL) {
            this->eventHandler_->postRead(ctx, "SendSensordataService.getData", bytes);
        }

        SendSensordataService_getData_result result;
        try {
            iface_->getData(result.success);
            result.__isset.success = true;
        }
        catch (ClientUnavailable& unavailable) {
            result.unavailable = unavailable;
            result.__isset.unavailable = true;
        }
        catch (const std::exception& e) {
            if (this->eventHandler_.get() != NULL) {
                this->eventHandler_->handlerError(ctx, "SendSensordataService.getData");
            }

            ::apache::thrift::TApplicationException x(e.what());
            oprot->writeMessageBegin("getData", ::apache::thrift::protocol::T_EXCEPTION, seqid);
            x.write(oprot);
            oprot->writeMessageEnd();
            oprot->getTransport()->writeEnd();
            oprot->getTransport()->flush();
            return;
        }

        if (this->eventHandler_.get() != NULL) {
            this->eventHandler_->preWrite(ctx, "SendSensordataService.getData");
        }

        oprot->writeMessageBegin("getData", ::apache::thrift::protocol::T_REPLY, seqid);
        result.write(oprot);
        oprot->writeMessageEnd();
        bytes = oprot->getTransport()->writeEnd();
        oprot->getTransport()->flush();

        if (this->eventHandler_.get() != NULL) {
            this->eventHandler_->postWrite(ctx, "SendSensordataService.getData", bytes);
        }
    }

    ::std::shared_ptr< ::apache::thrift::TProcessor > SendSensordataServiceProcessorFactory::getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) {
        ::apache::thrift::ReleaseHandler< SendSensordataServiceIfFactory > cleanup(handlerFactory_);
        ::std::shared_ptr< SendSensordataServiceIf > handler(handlerFactory_->getHandler(connInfo), cleanup);
        ::std::shared_ptr< ::apache::thrift::TProcessor > processor(new SendSensordataServiceProcessor(handler));
        return processor;
    }

    void SendSensordataServiceConcurrentClient::getData(SensorDataMessage& _return)
    {
        int32_t seqid = send_getData();
        recv_getData(_return, seqid);
    }

    int32_t SendSensordataServiceConcurrentClient::send_getData()
    {
        int32_t cseqid = this->sync_->generateSeqId();
        ::apache::thrift::async::TConcurrentSendSentry sentry(this->sync_.get());
        oprot_->writeMessageBegin("getData", ::apache::thrift::protocol::T_CALL, cseqid);

        SendSensordataService_getData_pargs args;
        args.write(oprot_);

        oprot_->writeMessageEnd();
        oprot_->getTransport()->writeEnd();
        oprot_->getTransport()->flush();

        sentry.commit();
        return cseqid;
    }

    void SendSensordataServiceConcurrentClient::recv_getData(SensorDataMessage& _return, const int32_t seqid)
    {

        int32_t rseqid = 0;
        std::string fname;
        ::apache::thrift::protocol::TMessageType mtype;

        // the read mutex gets dropped and reacquired as part of waitForWork()
        // The destructor of this sentry wakes up other clients
        ::apache::thrift::async::TConcurrentRecvSentry sentry(this->sync_.get(), seqid);

        while (true) {
            if (!this->sync_->getPending(fname, mtype, rseqid)) {
                iprot_->readMessageBegin(fname, mtype, rseqid);
            }
            if (seqid == rseqid) {
                if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
                    ::apache::thrift::TApplicationException x;
                    x.read(iprot_);
                    iprot_->readMessageEnd();
                    iprot_->getTransport()->readEnd();
                    sentry.commit();
                    throw x;
                }
                if (mtype != ::apache::thrift::protocol::T_REPLY) {
                    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
                    iprot_->readMessageEnd();
                    iprot_->getTransport()->readEnd();
                }
                if (fname.compare("getData") != 0) {
                    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
                    iprot_->readMessageEnd();
                    iprot_->getTransport()->readEnd();

                    // in a bad state, don't commit
                    using ::apache::thrift::protocol::TProtocolException;
                    throw TProtocolException(TProtocolException::INVALID_DATA);
                }
                SendSensordataService_getData_presult result;
                result.success = &_return;
                result.read(iprot_);
                iprot_->readMessageEnd();
                iprot_->getTransport()->readEnd();

                if (result.__isset.success) {
                    // _return pointer has now been filled
                    sentry.commit();
                    return;
                }
                if (result.__isset.unavailable) {
                    sentry.commit();
                    throw result.unavailable;
                }
                // in a bad state, don't commit
                throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getData failed: unknown result");
            }
            // seqid != rseqid
            this->sync_->updatePending(fname, mtype, rseqid);

            // this will temporarily unlock the readMutex, and let other clients get work done
            this->sync_->waitForWork(seqid);
        } // end while(true)
    }

} // namespace

